import { Injectable } from '@nestjs/common';import { ConfigService } from '@nestjs/config';import { RmqContext, RmqOptions, Transport } from '@nestjs/microservices';@Injectable()export class RmqService {  constructor(private readonly configService: ConfigService) {}  getOptions(queue: string): RmqOptions {    return {      transport: Transport.RMQ,      options: {        urls: [`amqp://${this.configService.get("USER_RABBITMQ")}:${this.configService.get("PASSWORD_RABBITMQ")}@${this.configService.get("HOST_RABBITMQ") || '127.0.0.1'}:${this.configService.get("PORT_RABBITMQ")}`],        queue: `RABBIT_MQ_${queue}_QUEUE` ,        queueOptions: {          durable: true ,        } ,        noAck : true,      },    };  }  ack(context: RmqContext) {    const channel = context.getChannelRef();    const originalMessage = context.getMessage();    channel.ack(originalMessage);  }  npAck(context: RmqContext) {    const channel = context.getChannelRef();    const originalMessage = context.getMessage();    channel.nack(originalMessage, false , true);  }}